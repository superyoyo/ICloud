package com.autonavi.okhttp.threadManager.Thread;import java.util.concurrent.FutureTask;import android.os.Process;import android.os.SystemClock;import com.autonavi.okhttp.threadManager.GlobalConfig;import com.autonavi.okhttp.threadManager.tools.LibLogger;import com.autonavi.okhttp.threadManager.tools.OsUtils;public class ThreadPoolTask extends FutureTask<Void> implements Comparable<ThreadPoolTask> {    private static final String TAG = "ThreadPoolTask";    public static final int PRIORITY_HIGH = 4;    public static final int PRIORITY_NORMAL = 5;    public static final int PRIORITY_LOW = 6;    private static final long UI_TASK_RUNNING_TIME_WARNING = 1000 * 5; // 5 second    private int mPriority = PRIORITY_NORMAL;    private long mQueuedTime;    private boolean mUiTask;    private String mCallStack;    /**     * Same to {@link #ThreadPoolTask(Runnable, boolean, int)} with {@link #PRIORITY_NORMAL}     *     * @param target     */    public ThreadPoolTask(Runnable target, boolean uiTask) {        super(target, null);        mUiTask = uiTask;        saveCallStack();    }    /**     * Construct a ThreadPoolTask object with specified target and priority.     *     * @param target     * @param priority One of the priorities {@link #PRIORITY_NORMAL}, {@link #PRIORITY_LOW}     *                 or {@link #PRIORITY_HIGH}     */    public ThreadPoolTask(Runnable target, boolean uiTask, int priority) {        super(target, null);        mPriority = priority;        mUiTask = uiTask;        saveCallStack();    }    private void saveCallStack() {        if (GlobalConfig.DEBUG_LOG && mUiTask) {            mCallStack = OsUtils.getCallstack();        }    }    public int getPriority() {        return mPriority;    }    void updateQueuedTime(long queuedTime) {        mQueuedTime = queuedTime;    }    @Override    public void run() {        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);        long startTime = SystemClock.elapsedRealtime();        super.run();        long timeUsed = SystemClock.elapsedRealtime() - startTime;        if (GlobalConfig.DEBUG_LOG && mUiTask && timeUsed > UI_TASK_RUNNING_TIME_WARNING) {            LibLogger.e(TAG, "heavy UI task found: " + timeUsed);            LibLogger.w(TAG, mCallStack);        }    }    @Override    public int compareTo(ThreadPoolTask another) {        if (mPriority < another.mPriority) {            return -1;        } else if (mPriority > another.mPriority) {            return 1;        } else {            if (mQueuedTime < another.mQueuedTime) {                return -1;            } else if (mQueuedTime > another.mQueuedTime) {                return 1;            }            return 0;        }    }}