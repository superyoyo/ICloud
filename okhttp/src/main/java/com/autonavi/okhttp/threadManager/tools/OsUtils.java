package com.autonavi.okhttp.threadManager.tools;import android.app.ActivityManager;import android.content.Context;import android.os.SystemClock;import com.autonavi.okhttp.threadManager.GlobalConfig;import java.io.File;import java.util.List;public class OsUtils {    private static final String TAG = "OsUtils";    /**     * Check if a process is still alive.     */    public static boolean isProcessAlive(Process process) {        try {            process.exitValue();            return false;        } catch (IllegalThreadStateException e) {            return true;        }    }    public static boolean waitNonChildProcess(int pid, long timeoutMs) {        long expireTime = System.currentTimeMillis() + timeoutMs;        while (true) {            if (GlobalConfig.DEBUG_LOG){                LibLogger.d(TAG, "checking pid state: " + pid);            }            File procFile = new File("/proc/" + pid);            if (!procFile.exists()) {                return true;            }            if (System.currentTimeMillis() >= expireTime) {                return false;            }            try {                // Sleep 100 milliseconds                Thread.sleep(100);            } catch (InterruptedException e) {                return false;            }        }    }    /**     * TODO tyc     * Sleep for a while, without dealing with the exception.     *     * @param time The time to sleep, in milliseconds.     */    public static void sleep(long time) {        SystemClock.sleep(time);    }    /**     * For debug purpose     */    public static String getCallstack() {        StackTraceElement[] stack = Thread.currentThread().getStackTrace();        StringBuilder strBuilder = new StringBuilder();        strBuilder.append("Thread name: ").append(Thread.currentThread().getName()).append('\n');        for (StackTraceElement element : stack) {            strBuilder.append("\tat ").append(element).append('\n');        }        return strBuilder.toString();    }    /**     * @return null may be returned if the specified process not found     */    public static String getProcessName(Context cxt, int pid) {        ActivityManager am = (ActivityManager) cxt.getSystemService(Context.ACTIVITY_SERVICE);        List<ActivityManager.RunningAppProcessInfo> runningApps = am.getRunningAppProcesses();        if (runningApps == null) {            return null;        }        for (ActivityManager.RunningAppProcessInfo procInfo : runningApps) {            if (procInfo.pid == pid) {                return procInfo.processName;            }        }        return null;    }    public static boolean isTop(Context context) {        ActivityManager activityManager = (ActivityManager) context                .getSystemService(Context.ACTIVITY_SERVICE);        List<ActivityManager.RunningTaskInfo> tasksInfo = activityManager.getRunningTasks(1);        if (tasksInfo.size() > 0) {            if (context.getPackageName()                    .equals(tasksInfo.get(0).topActivity.getPackageName())) {                return true;            }        }        return false;    }}