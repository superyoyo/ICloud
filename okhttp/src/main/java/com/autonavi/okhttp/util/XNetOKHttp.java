package com.autonavi.okhttp.util;import android.app.Activity;import android.util.Log;import com.autonavi.okhttp.callback.FindCallBack;import com.autonavi.okhttp.progress.helper.ProgressHelper;import com.autonavi.okhttp.progress.listener.ProgressListener;import com.autonavi.okhttp.threadManager.Thread.ThreadManager;import java.io.File;import java.io.IOException;import java.util.HashMap;import java.util.Iterator;import java.util.concurrent.TimeUnit;import okhttp3.Call;import okhttp3.Callback;import okhttp3.FormBody;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.RequestBody;import okhttp3.Response;/** * Created by lj88868 on 2016/1/12. */public class XNetOKHttp {    private static XNetOKHttp xnet;    private HashMap<String, Call> calls;    private OkHttpClient client;    private Activity ac;    private void setActivity(Activity ac){        this.ac = ac;    }    /**     * 如果请求在UI执行回调，则调用该构造方法     *     * @param ac     */    private XNetOKHttp(Activity ac) {        client=new OkHttpClient();        calls=new HashMap<String, Call>();        this.ac=ac;    }    /**     * 如果请求在UI执行回调，则调用该构造方法     *     * @param ac     */    public static XNetOKHttp getInstance(Activity ac){        if(xnet != null){            xnet.setActivity(ac);            return xnet;        }        return new XNetOKHttp(ac);    }    /**     * 如果请求不在UI层回调，则调用该构造方法     */    private XNetOKHttp() {        client=new OkHttpClient();        calls=new HashMap<String, Call>();    }    /**     * 如果请求不在UI层回调，则调用该构造方法     */    public static XNetOKHttp getInstance(){        if(xnet != null){            return xnet;        }        return new XNetOKHttp();    }    /**     * 根据tag去停止对应的网络请求     *     * @param tag 请求的唯一标示     */    public void stopRequestByTag(String tag){        Call call=calls.get(tag);        if(calls.containsKey(tag)){            call.cancel();        }else{            Log.i("liuji","XNetOKHttp --> stopRequestByTag--> 没有该请求，所以取消对应请求失败");        }    }    /**     * 取消所有的请求     */    public void stopAllRequest(){        Iterator<String> it = calls.keySet().iterator();        while (it.hasNext()) {            String tag = it.next();            Call call = calls.get(tag);            call.cancel();        }    }    /**     * 获取指定url的数据 GET     *     * @param url      服务器URL     * @param tag      获取任务的唯一标示，用来再回调时做区分     * @param callBack 获取动作完成后的回调     */    public void addGetTask(String url, HashMap<String, Object> params, final String tag, final FindCallBack callBack) {        StringBuilder str_build = new StringBuilder();        str_build.append(url);        Iterator<String> it = params.keySet().iterator();        int i = 0;        while (it.hasNext()) {            String key = it.next();            Object value = params.get(key);            if (i == 0) {                str_build.append("?" + key + "=" + value.toString());                i = 1;            } else {                str_build.append("&" + key + "=" + value.toString());            }        }        if (ac == null) {            ThreadManager.getInstance().addBkgTask(new GetDataRunnable(callBack, tag, str_build.toString(), null));        } else {            ThreadManager.getInstance().addUiTask(new GetDataRunnable(callBack, tag, str_build.toString(), ac));        }    }    /**     * 获取指定url的数据 POST     *     * @param url      服务器URL     * @param tag      获取任务的唯一标示，用来再回调时做区分     * @param callBack 获取动作完成后的回调     */    public void addPostTask(String url, HashMap<String, Object> params, final String tag, final FindCallBack callBack) {        if (ac == null) {            ThreadManager.getInstance().addBkgTask(new PostDataRunnable(callBack, tag, url, null, params));        } else {            ThreadManager.getInstance().addUiTask(new PostDataRunnable(callBack, tag, url, ac, params));        }    }    public ResponseBean addPostTask(String url, HashMap<String, Object> params){        ResponseBean rb = post(url, params);        return rb;    }    /**     * 添加上传任务     * @param findCallBack 服务器上传完毕后回调     * @param progressListener 若在UI操作，则传入UIProgressListener  否则直接传入ProgressListener     * @param params     * @param tag     * @param url     */    public void addUploadTask(FindCallBack findCallBack, ProgressListener  progressListener,                              HashMap<String, Object> params, HashMap<String, String> files,final String tag, String url){        ThreadManager.getInstance().addUiTask(new UploadRunnable(findCallBack, progressListener, params, files, tag, url));    }    /**     * 通过Get方式请求服务器     */    private class GetDataRunnable implements Runnable {        private FindCallBack callBack;        private String tag;        private String url;        private Activity ac;        public GetDataRunnable(FindCallBack callBack, String tag, String url, Activity ac) {            this.callBack = callBack;            this.tag = tag;            this.url = url;            this.ac = ac;        }        @Override        public void run() {            try {                Request request = new Request.Builder()                        .url(url)                        .build();                Call call=client.newCall(request);                synchronized (calls){                    calls.put(tag,call);                }                final Response response =call.execute();                synchronized (calls){                    if(calls.containsKey(tag)){                        calls.remove(tag);                    }                }                if(response.code() == 200){                    if (ac == null) {                        callBack.done(tag, response.body().toString(), null);                    } else {                        ac.runOnUiThread(new Runnable() {                            @Override                            public void run() {                                callBack.done(tag, response.body().toString(), null);                            }                        });                    }                }else{                    if (ac == null) {                        callBack.done(tag, response.body().toString(),                                new Exception("返回码错误：code:" + response.code()));                    } else {                        ac.runOnUiThread(new Runnable() {                            @Override                            public void run() {                                callBack.done(tag, response.body().toString(),                                        new Exception("返回码错误：code:" + response.code()));                            }                        });                    }                }            } catch (final Exception e) {                e.printStackTrace();                synchronized (calls){                    if(calls.containsKey(tag)){                        calls.remove(tag);                    }                }                if (ac == null) {                    callBack.done(tag, null, e);                } else {                    ac.runOnUiThread(new Runnable() {                        @Override                        public void run() {                            callBack.done(tag, null, e);                        }                    });                }            }        }    }    /**     * 通过Post请求访问服务器     */    private class PostDataRunnable implements Runnable {        private FindCallBack callBack;        private String tag;        private String url;        private Activity ac;        private HashMap<String, Object> params;        public PostDataRunnable(FindCallBack callBack, String tag,                                String url, Activity ac, HashMap<String, Object> params) {            this.callBack = callBack;            this.tag = tag;            this.url = url;            this.ac = ac;            this.params = params;        }        @Override        public void run() {            if(!url.startsWith("http://")){                if (ac == null) {                    callBack.done(tag, "",                            new Exception("无效的url"));                } else {                    ac.runOnUiThread(new Runnable() {                        @Override                        public void run() {                            callBack.done(tag, "",                                    new Exception("无效的url"));                        }                    });                }                return ;            }            FormBody.Builder builder = new FormBody.Builder();            Iterator<String> it = params.keySet().iterator();            while (it.hasNext()) {                String key = it.next();                Object value = params.get(key);                builder.add(key, value.toString());                Log.i("liuji","PostDataRunnable --> run--> key:" +key +" value:" +value.toString());            }            RequestBody formBody = builder.build();            Request request = new Request.Builder()                    .url(url)                    .post(formBody)                    .build();            request.tag();            Log.i("liuji","PostDataRunnable --> run--> start request!!!");            try {                Call call=client.newCall(request);                Log.i("liuji","PostDataRunnable --> run--> call before :" + System.currentTimeMillis());                synchronized (calls){                    calls.put(tag,call);                }                Log.i("liuji","PostDataRunnable --> run--> call after :" + System.currentTimeMillis());                final Response response = call.execute();                synchronized (calls){                    if(calls.containsKey(tag)){                        calls.remove(tag);                    }                }                Log.i("liuji","PostDataRunnable --> run--> code:"+ response.code());                if(response.code() == 200){                    if (ac == null) {                        callBack.done(tag, response.body().string(), null);                    } else {                        final String res = response.body().string();                        ac.runOnUiThread(new Runnable() {                            @Override                            public void run() {                                callBack.done(tag, res, null);                            }                        });                    }                }else{                    if (ac == null) {                        callBack.done(tag, response.body().string(),                                new Exception("返回码错误：code:" + response.code()));                    } else {                        final String res = response.body().string();                        ac.runOnUiThread(new Runnable() {                            @Override                            public void run() {                                callBack.done(tag, res,                                        new Exception("返回码错误：code:" + response.code()));                            }                        });                    }                }            } catch (final Exception e) {                e.printStackTrace();                synchronized (calls){                    if(calls.containsKey(tag)){                        calls.remove(tag);                    }                }                if (ac == null) {                    callBack.done(tag, null, e);                } else {                    ac.runOnUiThread(new Runnable() {                        @Override                        public void run() {                            callBack.done(tag, null, e);                        }                    });                }            }        }    }    public class ResponseBean{        private String result;        private int code;//0 success  1 failed        private Exception exception;        public int getCode() {            return code;        }        public void setCode(int code) {            this.code = code;        }        public Exception getException() {            return exception;        }        public void setException(Exception exception) {            this.exception = exception;        }        public String getResult() {            return result;        }        public void setResult(String result) {            this.result = result;        }    }    /**     * 同步的post方法     * @param url     * @param params     * @return     * @throws Exception     */    private ResponseBean post(String url, HashMap<String, Object> params){        ResponseBean rb = new ResponseBean();        if(!url.startsWith("http://")){            rb.setCode(2);            rb.setException(new Exception("无效的url"));            rb.setResult(null);            return rb;        }        if(params == null || params.size() == 0){            rb.setCode(2);            rb.setException(new Exception("参数不能为空"));            rb.setResult(null);            return rb;        }        FormBody.Builder builder = new FormBody.Builder();        Iterator<String> it = params.keySet().iterator();        while (it.hasNext()) {            String key = it.next();            Object value = params.get(key);            builder.add(key, value.toString());            Log.i("liuji","PostDataRunnable --> run--> key:" +key +" value:" +value.toString());        }        RequestBody formBody = builder.build();        Request request = new Request.Builder()                .url(url)                .post(formBody)                .build();        request.tag();        Call call=client.newCall(request);        try{            Response response = call.execute();            if(response.code() == 200){                rb.setCode(0);                rb.setException(null);                rb.setResult(response.body().string());            }else{                rb.setCode(1);                rb.setException(new Exception("code:" + response.code() + " body:" + response.body().string()));                rb.setResult(null);            }        }catch (Exception e){            rb.setCode(1);            rb.setException(e);            rb.setResult(null);        }        return rb;    }    public class UploadRunnable implements Runnable{        private FindCallBack findCallBack;        private ProgressListener progressListener;        private String tag;        private String url;        private HashMap<String, Object> params;        private HashMap<String, String> files;        public UploadRunnable(FindCallBack findCallBack, ProgressListener progressListener,                              HashMap<String, Object> params, HashMap<String, String> files, String tag, String url) {            this.findCallBack = findCallBack;            this.progressListener = progressListener;            this.params = params;            this.files = files;            this.tag = tag;            this.url = url;        }        @Override        public void run() {            //构造上传请求，类似web表单            MultipartBody.Builder builder = new MultipartBody.Builder().setType(MultipartBody.FORM);            Iterator<String> it = params.keySet().iterator();            while (it.hasNext()){                String key = it.next();                Object value = params.get(key);                builder.addFormDataPart(key, value.toString());            }            it = files.keySet().iterator();            while (it.hasNext()){                String key = it.next();                String path = files.get(key);                File file = new File(path);                builder.addFormDataPart(key, file.getName(), RequestBody.create(MediaType.parse("application/octet-stream"), file));            }            RequestBody requestBody = builder.build();            //进行包装，使其支持进度回调            final Request request = new Request.Builder().url(url)                    .post(ProgressHelper.addProgressRequestListener(requestBody, progressListener)).build();            //开始请求            client.newCall(request).enqueue(new Callback() {                @Override                public void onFailure(Request request, IOException e) {                    e.printStackTrace();                    findCallBack.done(tag, request.body().toString(), e);                }                @Override                public void onResponse(Response response) throws IOException {                    findCallBack.done(tag, request.body().toString(), null);                }            });        }    }}